https://capital.com/overconfidence-bias
https://capital.com/familiarity-bias
https://capital.com/disposition-effect
https://capital.com/loss-aversion-bias-explained
https://capital.com/anchoring-bias
https://capital.com/herd-bias
https://capital.com/negativity-bias
https://capital.com/hot-hand-fallacy-bias
https://capital.com/gamblers-fallacy-bias
https://capital.com/confirmation-bias
https://capital.com/self-attribution-bias
https://capital.com/hindsight-bias
https://capital.com/recency-bias
https://capital.com/emotions-in-trading
https://capital.com/endowment-effect
https://capital.com/fear-and-greed-index
https://capital.com/survivorship-bias




        @allure.step("Start test of button [Sell] in Banner [Trading Instrument]")
    def test_11_03_01_10_button_sell(
            self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password,
            cur_item_link, prob_run_tc):
        """
        Check: Button [Sell] in Banner "Trading Instrument"
        Language: All. License: All.
        """
        print(f"\n{datetime.now()}   Работает obj {self} с именем TC_11.03.01_10")
        build_dynamic_arg_v2(self, d, worker_id, cur_language, cur_country, cur_role, prob_run_tc,
                             "11.03.01", "Educations > Menu item [Trading Strategies Guides]",
                             "10", "Testing button [Sell] in Banner [Trading Instrument]")

        if cur_country == 'gb':
            pytest.skip("This test is not supported on UK location")

        if cur_language not in ["", "de", "es", "it"]:
            Common().skip_test_for_language(cur_language)

        page_conditions = Conditions(d, "")
        page_conditions.preconditions(
            d, CapitalComPageSrc.URL, "", cur_language, cur_country, cur_role, cur_login, cur_password)

        test_element = SellButtonContentBlock(d, cur_item_link)
        test_element.arrange_(d, cur_item_link)

        test_element.element_click(cur_role)

        test_element = AssertClass(d, cur_item_link)
        match cur_role:
            case "NoReg":
                test_element.assert_signup(d, cur_language, cur_item_link)
            case "Reg/NoAuth":
                test_element.assert_login(d, cur_language, cur_item_link)
            case "Auth":
                test_element.assert_trading_platform_v2(d, cur_item_link)

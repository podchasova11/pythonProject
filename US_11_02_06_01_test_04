
#  affilate 11_02_06_01_test_04

    @allure.step("Start test of button [1. Create & verify your account] in Block 'Steps trading'")
    @pytest.mark.test_04
    def test_04_create_and_verify_your_account_button_in_block_steps_trading(
            self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password, cur_item_link):
        """
        Check: Button [1. Create & verify your account] in block 'Steps trading'
        Language: EN, DE, ES, IT, RU, ZH. License: All.
        """
        test_title = ("11.02.06", "Education > Menu item [Indices Trading]",
                      ".01_04", "Testing button [1. Create & verify your account] in Block 'Steps trading'")

        bid = build_dynamic_arg_v4(
            d, worker_id, cur_language, cur_country, cur_role, *test_title)

        Common().check_language_in_list_and_skip_if_not_present(
            cur_language, ["", "de", "es", "it", "ru", "zh"])

        page_conditions = Conditions(d, "")
        page_conditions.preconditions(
            d, CapitalComPageSrc.URL, "", cur_language, cur_country, cur_role, cur_login, cur_password)

        test_element = BlockStepTrading(d, cur_item_link, bid)
        test_element.full_test_with_tpi(d, cur_language, cur_country, cur_role, cur_item_link)

        #    logger.warning(f"Testing element is not clicked")
         #   logger.info(f"====== FAIL testing {', '.join(test_title)} ======")
          #  pytest.fail("Testing element is not clicked")

       # test_element = AssertClass(d, cur_item_link, bid)
        # match cur_role:
         #   case "NoReg" | "NoAuth":
         #       test_element.assert_signup(d, cur_language, cur_item_link)
          #  case "Auth":
          #      test_element.assert_trading_platform_v4(d, cur_item_link)

     #   logger.info(f"====== END testing {', '.join(test_title)} ======")

# main 11_02_06_00_test_04

    @allure.step("Start test of button [1. Create & verify your account] in Block 'Steps trading'")
    @pytest.mark.test_04
    def test_04_create_and_verify_your_account_button_in_block_steps_trading(
            self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password):
        """
        Check: Button [1. Create & verify your account] in block 'Steps trading'
        Language: EN, AR, DE, ES, IT, CN, RU, ZH. License: All.
        """

        test_title = ("11.02.06", "Education > Menu item [Indices Trading]",
                      ".00_04", "Testing button [1. Create & verify your account] in Block 'Steps trading'")

        bid = build_dynamic_arg_v4(
            d, worker_id, cur_language, cur_country, cur_role, *test_title)

        Common().check_language_in_list_and_skip_if_not_present(
            cur_language, ["", "ar", "de", "es", "it", "cn", "ru", "zh"])

        page_conditions = Conditions(d, "")
        main_page_link = page_conditions.preconditions(
            d, CapitalComPageSrc.URL, "", cur_language, cur_country, cur_role, cur_login, cur_password)

        page_menu = MenuSection(d, main_page_link)
        page_menu.menu_education_move_focus(d, cur_language)
        cur_menu_link = page_menu.sub_menu_indices_trading_move_focus_click(d, cur_language)

        test_element = BlockStepTrading(d, cur_menu_link, bid)
        test_element.full_test_with_tpi(d, cur_language, cur_country, cur_role, cur_menu_link)



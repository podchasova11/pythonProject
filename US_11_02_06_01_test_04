    @allure.step("Start test of button [1. Create & verify your account] in Block 'Steps trading'")
    @pytest.mark.test_04
    def test_04_create_and_verify_your_account_button_in_block_steps_trading(
            self, worker_id, d, cur_language, cur_country, cur_role, cur_login, cur_password, cur_item_link):
        """
        Check: Button [1. Create & verify your account] in block 'Steps trading'
        Language: All. License: All.
        """
        test_title = ("11.02.06", "Education > Menu item [Indices Trading]",
                      ".01_04", "Testing button [1. Create & verify your account] in Block 'Steps trading'")

        logger.info(f"====== START testing {', '.join(test_title)} ======")

        bid = build_dynamic_arg_v4(
            d, worker_id, cur_language, cur_country, cur_role, *test_title)

        page_conditions = Conditions(d, "")
        page_conditions.preconditions(
            d, CapitalComPageSrc.URL, "", cur_language, cur_country, cur_role, cur_login, cur_password)

        test_element = BlockStepTrading(d, cur_item_link)
        test_element.arrange_(d, cur_item_link)

        if not test_element.element_click():
            logger.warning(f"Testing element is not clicked")
            logger.info(f"====== FAIL testing {', '.join(test_title)} ======")
            pytest.fail("Testing element is not clicked")

        test_element = AssertClass(d, cur_item_link, bid)
        match cur_role:
            case "NoReg" | "NoAuth":
                test_element.assert_signup(d, cur_language, cur_item_link)
            case "Auth":
                test_element.assert_trading_platform_v4(d, cur_item_link)

        logger.info(f"====== END testing {', '.join(test_title)} ======")
